#!/bin/bash
# Set AWS_PROFILE_ID to the profile id if not using the default profile
# set AWS_STATUS_PAUSE=seconds between check, default 5
# set AWS_STATUS_RETRY=count, default 12
# 
# AWS policy required for API
# {
#    "Version": "2012-10-17",
#    "Statement": [
#        {
#            "Sid": "ActionOnHostedZone",
#            "Effect": "Allow",
#            "Action": [
#                "route53:ChangeResourceRecordSets",
#                "route53:ListResourceRecordSets"
#            ],
#            "Resource": [
#                "arn:aws:route53:::hostedzone/YOUR_HOST_ZONE_ID"
#            ]
#        },
#        {
#            "Sid": "ActionOnRoute53",
#            "Effect": "Allow",
#            "Action": [
#                "route53:ListHostedZones",
#                "route53:ListHostedZonesByName"
#            ],
#            "Resource": [
#                "*"
#            ]
#        },
#        {
#            "Sid": "ActionOnRoute53Change",
#            "Effect": "Allow",
#            "Action": [
#                "route53:GetChange"
#            ],
#            "Resource": [
#                "*"
#            ]
#        }
#    ]
#}
#
AWS_STATUS_PAUSE=${AWS_STATUS_PAUSE:-5}
AWS_STATUS_RETRY=${AWS_STATUS_RETRY:-12}
AWS_CLI="aws --output text"
if [ ! -z "${AWS_PROFILE_ID}" ]; then
  AWS_CLI+=" --profile ${AWS_PROFILE_ID}"
fi

# Get the host zone id for a hostname
# $1 hostname
function get_hostzoneid() {
  local domain=$(echo $1|cut -s -d . -f 2-)
  if [ -z ${domain} ]; then
    echo "failed to obtain domain for $1"
    exit 1
  fi
  local zoneid=$($AWS_CLI route53 list-hosted-zones  --query "HostedZones[?Name=='${domain}.']" |grep hostedzone |cut -s -f 2 |cut -s -d / -f 3)
  if [ -z ${zoneid} ]; then
    echo "failed to obtain zoneid for ${domain}"
    exit 1
  fi 
  echo "${zoneid}"
}

# Get the existing value for a resource set
# $1: host zone id
# $2: resource set name
# $3: resource set type
function get_resource_value() {
  local value=$($AWS_CLI route53 list-resource-record-sets --hosted-zone-id "$1" --query "ResourceRecordSets[?Name=='$2.'&&Type=='$3']"|grep RESOURCERECORDS |cut -s -f 2|tr -d \")
  echo "${value}"
}

# Prepare the change action for route 53 change-resource-record-sets action 
# $1: action "CREATE"|"DELETE"|"UPSERT"
# $2: resource set name
# $3: resource set value
function prepare_change_action() {
  local temp_file=$(mktemp -t route53_change_actionXXXXXXXX)
  cat <<EOF > ${temp_file}
{
   "Comment": "Lets Encrypt DNS authentication",
   "Changes": [
     {
        "Action": "_ACTION_",
        "ResourceRecordSet": {
            "Name": "_HOST_.",
            "Type": "TXT",
            "TTL": 60,
            "ResourceRecords": [
                {
                   "Value": "\"_VALUE_\""
                }
            ]
        }
     }
   ]
}
EOF
  sed -i "" -e "s;_ACTION_;$1;g" ${temp_file}
  sed -i "" -e "s;_HOST_;$2;g" ${temp_file}
  sed -i "" -e "s;_VALUE_;$3;g" ${temp_file}
  echo ${temp_file}
}

# Send AWS route53 change resource reset sets request
# Check for status to change to INSYNC
# $1: host zone id
# $2: change request JSON file
function change_resource_set() {
  local result=$($AWS_CLI route53 change-resource-record-sets --hosted-zone-id "${1}" --change-batch "file://${2}")
  # check for result and extract change id
  local change_id=$(echo "$result" |grep 'CHANGEINFO' | cut -s -d / -f 3|cut -s -f 1)
  if [ -z "${change_id}" ]; then
    echo "Failed to perform change action: "
    echo "$result"
    exit 1
  fi
  # loop to check for change id status
  for i in $(seq 1 $AWS_STATUS_RETRY); do
    sleep ${AWS_STATUS_PAUSE}
    echo -n "Checking status for change request (${change_id})"
    if [ ! -z "$status" ]; then 
      echo -n ", last status: $status"
    fi
    if [ $i -gt 1 ]; then 
      echo -n ", retry ($i)"
    fi
    echo ""
    status=$($AWS_CLI route53 get-change --id "${change_id}"| grep 'CHANGEINFO' |cut -s -d / -f 3|cut -s -f 2)
    if [ "INSYNC" == "${status}" ]; then
      echo "Successfully applied change request (${change_id}), last status ${status}"
      return
    fi
  done
  echo "Timed out waiting for INSYNC status for change (${change_id}), last status ${status}"
  exit 1
}

host_zone_id=$(get_hostzoneid "$1")
change_action=$(prepare_change_action UPSERT "_acme-challenge.${1}" "${2}")
echo "Change request for updating  _acme-challenge.${1} TXT resource set in host zone $host_zone_id"
cat ${change_action}
read -r -p "Press any key to send the aws request..."
change_resource_set "$host_zone_id" "${change_action}"
rm ${change_action}
